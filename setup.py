#!/usr/bin/env python3
"""
Setup script for Email Summarizer application

This script helps with initial setup and configuration.
"""
import os
import sys
import secrets
import subprocess
from pathlib import Path


def check_python_version():
    """Check if Python version is 3.8 or higher"""
    if sys.version_info < (3, 8):
        print("❌ Python 3.8 or higher is required.")
        print(f"   Current version: {sys.version}")
        sys.exit(1)
    print(f"✅ Python version: {sys.version.split()[0]}")


def create_env_file():
    """Create .env file from template"""
    env_path = Path('.env')
    template_path = Path('config.env.template')
    
    if env_path.exists():
        print("✅ .env file already exists")
        return
    
    if not template_path.exists():
        print("⚠️  config.env.template not found, creating basic .env file...")
        
        # Generate a secure secret key
        secret_key = secrets.token_hex(32)
        
        env_content = f"""# Email Summarizer Environment Configuration
# Generated by setup script

# Flask Configuration
FLASK_APP=run.py
FLASK_ENV=development
SECRET_KEY={secret_key}

# Database Configuration
DATABASE_URL=sqlite:///email_summarizer.db

# Microsoft Azure/Graph API Configuration
AZURE_CLIENT_ID=your-azure-client-id
AZURE_CLIENT_SECRET=your-azure-client-secret
AZURE_TENANT_ID=common
REDIRECT_URI=http://localhost:5000/auth/callback

# OpenAI Configuration
OPENAI_API_KEY=your-openai-api-key
OPENAI_MODEL=gpt-3.5-turbo

# Admin Configuration
ADMIN_DEFAULT_PASSWORD=changeme123

# Application Settings
APP_NAME=Email Summarizer
APP_VERSION=1.0.0
MAX_EMAILS_PER_DIGEST=200
# DAILY_DIGEST_LIMIT=1  # Deprecated - no limit
"""
        with open('.env', 'w') as f:
            f.write(env_content)
        print("✅ Created .env file with default configuration")
    else:
        # Copy from template
        import shutil
        shutil.copy(template_path, env_path)
        print("✅ Created .env file from template")
    
    print("\n⚠️  IMPORTANT: Edit .env file and add your API credentials:")
    print("   - AZURE_CLIENT_ID and AZURE_CLIENT_SECRET")
    print("   - OPENAI_API_KEY")
    print("   - Change ADMIN_DEFAULT_PASSWORD")


def create_directories():
    """Create necessary directories"""
    directories = [
        'logs',
        'instance',
        'migrations',
        'app/static/css',
        'app/static/js',
        'app/static/img',
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
    
    print("✅ Created directory structure")


def install_requirements():
    """Install Python requirements"""
    print("\n📦 Installing Python packages...")
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'])
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'])
        print("✅ Python packages installed successfully")
    except subprocess.CalledProcessError:
        print("❌ Failed to install Python packages")
        print("   Try running: pip install -r requirements.txt")
        return False
    return True


def initialize_database():
    """Initialize the database"""
    print("\n🗄️  Initializing database...")
    try:
        # Set minimal environment variables for database initialization
        os.environ['FLASK_APP'] = 'run.py'
        os.environ['FLASK_ENV'] = 'development'
        
        # Run database initialization
        subprocess.check_call([sys.executable, 'init_db.py'])
        return True
    except subprocess.CalledProcessError:
        print("❌ Failed to initialize database")
        print("   Try running: python init_db.py")
        return False


def main():
    """Main setup function"""
    print("""
    ╔══════════════════════════════════════════════════════════╗
    ║          Email Summarizer - Initial Setup                ║
    ╚══════════════════════════════════════════════════════════╝
    """)
    
    # Check Python version
    check_python_version()
    
    # Create directories
    create_directories()
    
    # Create .env file
    create_env_file()
    
    # Check if in virtual environment
    if not hasattr(sys, 'real_prefix') and not (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("\n⚠️  WARNING: Not running in a virtual environment!")
        print("   It's recommended to use a virtual environment:")
        print("   python -m venv venv")
        print("   source venv/bin/activate  # On Windows: venv\\Scripts\\activate")
        
        response = input("\nContinue anyway? (y/N): ")
        if response.lower() != 'y':
            sys.exit(0)
    
    # Install requirements
    if not install_requirements():
        sys.exit(1)
    
    # Initialize database
    if initialize_database():
        print("""
    ╔══════════════════════════════════════════════════════════╗
    ║                 Setup Complete! 🎉                       ║
    ╚══════════════════════════════════════════════════════════╝
    
    Next steps:
    
    1. Configure your API credentials in .env file:
       - Azure Client ID and Secret
       - OpenAI API Key
    
    2. Start the application:
       python run.py
    
    3. Access the application:
       http://localhost:5000
    
    4. Login with default admin credentials:
       Username: admin
       Password: (check your .env file)
    
    For detailed setup instructions, see README.md
        """)
    else:
        print("\n❌ Setup incomplete. Please check the errors above.")


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nSetup cancelled by user.")
        sys.exit(1)
    except Exception as e:
        print(f"\n❌ Unexpected error: {e}")
        sys.exit(1)
